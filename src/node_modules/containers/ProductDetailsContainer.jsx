import React, {Component} from "react";
import {connect} from "react-redux";
import {Link} from 'react-router-dom';

import {
    fetchProductDetails, 
    fetchComments, 
    sendFeedback
} from "store/actions";
import Loader from 'components/loader';
import ErrorIndicator from 'components/error-indicator';
import ProductDetails from 'components/product-details';
import CommentForPosting from 'components/comment-for-posting';
import CommentsUser from 'components/comments-user';

class ProductDetailsContainer extends Component {

    state = {
        setRating: 0,
        setComment: ''
    }

    async componentDidMount() {
        const {
            match: {
                params: {
                    id
                }
            },
            getDetailsProduct,
            getComments
        } = this.props;
        await getDetailsProduct(id);
        await getComments(id);
    }

    submitForm = async(event) => {
        event.preventDefault();

        const {
            match: {
                params: {
                    id
                }
            },
            sendFeedback,
            getComments
        } = this.props;
        const {setRating, setComment} = this.state;

        await sendFeedback(id, setRating, setComment);
        await getComments(id);

        this.setState({setComment: '', setRating: 0})
    }

    changeRating = setRating => this.setState({setRating: setRating});

    commentChange = event => this.setState({
        setComment: event.target.value
    });

    averageRate = (data) => 
        data.reduce((acc, item) => 
        acc + item.rate, 0) / data.length;

    renderCommentForPost = (setRating, setComment, isAuth) => {
        if (isAuth) {
            return (<CommentForPosting
                setRating={setRating}
                setComment={setComment}
                handleChangeRating={this.changeRating}
                handleCommentChange={this.commentChange}
                handleSubmit={this.submitForm}/>)
        }
        return (
            <Link
                to='/registration'
                className="nav-link text-center text-danger"
                title="registration">
                <h5>Only authorized users can leave a comment!</h5>
            </Link>
        )
    }

    renderComment = (comment) => {
        return (
            <CommentsUser 
                key={`comment-key-${comment.id}`} 
                comment={comment}
            />
        )
    }

    render() {
        const {
            productDetails, 
            commentsList, 
            loading, 
            error, 
            isAuth
        } = this.props;
        const {setRating, setComment} = this.state
        const averageRating = this.averageRate(commentsList);

        if (loading) {
            return <Loader/>;
        }

        if (error) {
            return <ErrorIndicator/>;
        }

        if (!productDetails) {
            return(
                <div className="text-center text-danger mt-4 ">
                    <h4>Sorry, the page was not found (</h4>
                    <ErrorIndicator/>
                </div>
            )
        }

        return (
            <div>
                <ProductDetails
                    product={productDetails}
                    rating={isNaN(averageRating)
                    ? 0
                    : averageRating}/>
                <section className="list-comment bg-light">
                    <div className="comment container mt-4">
                        <h4 className="text-uppercase pt-4 text-center">Comment's</h4>
                        {this.renderCommentForPost(
                            setRating, 
                            setComment, 
                            isAuth
                            )}
                        {commentsList.map(
                            comment => this.renderComment(comment)
                            )}
                    </div>
                </section>
            </div>
        )
    }
}
function mapStateToProps({
    productDetails, 
    commentsList, 
    loading, 
    error, 
    isAuth
}) {
    return {
        productDetails, 
        commentsList, 
        loading, 
        error, 
        isAuth
    };
}

function mapDispatchToProps(dispatch) {
    return {
        getDetailsProduct: id => dispatch(fetchProductDetails(id)),
        getComments: id => dispatch(fetchComments(id)),
        sendFeedback: (
            id, 
            setRating, 
            setComment
            ) => dispatch(sendFeedback(
                id, 
                setRating, 
                setComment
                ))
    };
}

export default connect(
    mapStateToProps, 
    mapDispatchToProps
)(ProductDetailsContainer);
